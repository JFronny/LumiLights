{
    programs: [
        {
            // utility, does what it says on the tin
            name: "copy",
            vertexSource: "canvas:shaders/pipeline/post/simple_full_frame.vert",
            fragmentSource: "canvas:shaders/pipeline/post/copy.frag",
            samplers: ["_cvu_input"]
        }, {
            // copies from a specific level of detail, that's it
            name: "copy_lod",
            vertexSource: "canvas:shaders/pipeline/post/simple_full_frame.vert",
            fragmentSource: "canvas:shaders/pipeline/post/copy_lod.frag",
            samplers: ["_cvu_input"]
        }, {
            // copies colored pixels from main color buffer if marked emissive
            name: "emissive_color",
            vertexSource: "canvas:shaders/pipeline/post/simple_full_frame.vert",
            fragmentSource: "canvas:shaders/pipeline/post/emissive_color.frag",
            samplers: ["_cvu_base", "_cvu_emissive"]
        }, {
            // combines final bloom image and main color buffer
            name: "bloom",
            vertexSource: "canvas:shaders/pipeline/post/simple_full_frame.vert",
            fragmentSource: "canvas:shaders/pipeline/post/bloom.frag",
            samplers: ["_cvu_base", "_cvu_bloom"]
        }, {
            // uses a fancy sampling algo for higher quality, not a conventional mipmap
            name: "downsample",
            vertexSource: "canvas:shaders/pipeline/post/simple_full_frame.vert",
            fragmentSource: "canvas:shaders/pipeline/post/downsample.frag",
            samplers: ["_cvu_input"]
        }, {
            // less fancy (but still slightly fancy) upsample of downsample outputs
            name: "upsample_first",
            vertexSource: "canvas:shaders/pipeline/post/simple_full_frame.vert",
            fragmentSource: "canvas:shaders/pipeline/post/upsample_first.frag",
            samplers: ["_cvu_input"]
        }, {
            name: "upsample",
            // same as upsample_first but combines with next lower level of detail
            vertexSource: "canvas:shaders/pipeline/post/simple_full_frame.vert",
            fragmentSource: "canvas:shaders/pipeline/post/upsample.frag",
            samplers: ["_cvu_input", "cvu_prior"]
        }, {
            name: "fabulous",
            // implements fabulous mode composite - same method as Mojang
            vertexSource: "lumi:shaders/pipeline/post/simple.vert",
            fragmentSource: "lumi:shaders/pipeline/post/fabulous.frag",
            samplers: [
                "diffuseColor", "diffuseDepth",
                "translucentColor", "translucentDepth",
                "entityColor", "entityDepth",
                "particleColor", "particleDepth",
                "weatherColor", "weatherDepth",
                "cloudsColor", "cloudsDepth"
            ],
        }, {
            name: "reflection",
            // implements reflection
            vertexSource: "lumi:shaders/pipeline/post/simple.vert",
            fragmentSource: "lumi:shaders/pipeline/post/reflection.frag",
            samplers: ["u_composite", "u_albedo", "u_solid_depth", "u_translucent_depth", "u_entity_depth", "u_particles_depth", "u_normal", "u_material"]
        }, {
            name: "fxaa",
            // implements fxaa
            vertexSource: "lumi:shaders/pipeline/post/simple.vert",
            fragmentSource: "lumi:shaders/pipeline/post/fxaa.frag",
            samplers: ["u_color"]
        }
    ]
}
